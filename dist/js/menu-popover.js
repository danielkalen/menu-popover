// Generated by CoffeeScript 1.11.1
(function($) {
  var MenuPopover, applyStyles, defaultOptions, markup, removeStyles, style, styleOpenState;
  applyStyles = function(el, styleObject, additional) {
    var key, value;
    if (additional) {
      styleObject = $.extend({}, styleObject, additional);
    }
    for (key in styleObject) {
      value = styleObject[key];
      (el[0] || el).style[key] = value;
    }
    return el;
  };
  removeStyles = function(el, styleObject, stylesToReinstate) {
    var key;
    for (key in styleObject) {
      (el[0] || el).style[key] = '';
    }
    if (stylesToReinstate) {
      applyStyles(el, stylesToReinstate);
    }
    return el;
  };
  style = {
    container: {
      position: 'absolute',
      zIndex: '4000',
      top: '0',
      left: '0',
      width: '100vw',
      height: '100vh',
      visibility: 'hidden'
    },
    overlay: {
      position: 'fixed',
      zIndex: '1',
      left: '0',
      top: '0',
      width: '100vw',
      height: '100vh',
      backgroundColor: 'rgba(0,0,0,0.70)',
      opacity: 0,
      transition: 'opacity 0.25s'
    },
    list: {
      position: 'absolute',
      zIndex: '2',
      top: '100vh',
      width: '100%',
      paddingBottom: '30px',
      backgroundColor: 'white',
      webkitTransform: 'translateY(0)',
      mozTransform: 'translateY(0)',
      msTransform: 'translateY(0)',
      oTransform: 'translateY(0)',
      transform: 'translateY(0)',
      transition: 'transform 0.25s'
    },
    desc: {
      position: 'relative',
      width: '100%',
      padding: '20px',
      borderBottom: '1px solid #e6e6e6',
      boxSizing: 'border-box',
      fontSize: '15.2px',
      fontWeight: '500',
      lineHeight: '1.35',
      textAlign: 'center',
      color: 'rgba(0,0,0,0.35)'
    },
    listItem: {
      position: 'relative',
      width: '100%',
      height: '66px',
      padding: '0 20px',
      borderBottom: '1px solid #e6e6e6',
      boxSizing: 'border-box',
      fontSize: '18px',
      fontWeight: '500',
      color: '#181818'
    },
    listItemHighlight: {
      fontWeight: '600',
      color: '#f1c618'
    },
    listItemText: {
      position: 'absolute',
      top: '50%',
      left: '0',
      right: '0',
      width: '100%',
      textAlign: 'center',
      lineHeight: '1',
      webkitTransform: 'translateY(-50%)',
      mozTransform: 'translateY(-50%)',
      msTransform: 'translateY(-50%)',
      oTransform: 'translateY(-50%)',
      transform: 'translateY(-50%)'
    }
  };
  styleOpenState = {
    container: {
      visibility: 'visible'
    },
    overlay: {
      opacity: '1'
    },
    list: {
      opacity: '1',
      visibility: 'visible',
      transition: 'transform 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)'
    },
    listTransform: function(height) {
      return {
        webkitTransform: "translateY(-" + height + "px)",
        mozTransform: "translateY(-" + height + "px)",
        msTransform: "translateY(-" + height + "px)",
        oTransform: "translateY(-" + height + "px)",
        transform: "translateY(-" + height + "px)"
      };
    }
  };
  markup = {
    container: "<div class='MenuPopover'></div>",
    overlay: "<div class='MenuPopover-overlay'></div>",
    list: "<div class='MenuPopover-list'></div>",
    desc: function(desc) {
      return "<div class='MenuPopover-list-desc'>" + desc + "</div>";
    },
    listItem: function(label) {
      return "<div class='MenuPopover-list-item'> <div class='MenuPopover-list-item-label'>" + label + "</div> </div>";
    }
  };
  defaultOptions = {
    'clickEvent': 'click',
    'style': style,
    'styleOpenState': styleOpenState
  };
  MenuPopover = function(arg) {
    var action, label, options, ref, ref1;
    this.name = arg.name, this.items = arg.items, this.desc = arg.desc, this.highlights = (ref = arg.highlights) != null ? ref : [], options = arg.options;
    this.options = $.extend(true, {}, defaultOptions, options);
    this.isOpen = false;
    this.els = {};
    this.els.container = $(markup.container).attr('id', this.name);
    this.els.overlay = $(markup.overlay).appendTo(this.els.container);
    this.els.list = $(markup.list).appendTo(this.els.container);
    if (this.desc) {
      this.els.desc = $(markup.desc(this.desc)).appendTo(this.els.list);
    }
    this.els.items = {};
    ref1 = this.items;
    for (label in ref1) {
      action = ref1[label];
      this.els.items[label] = $(markup.listItem(label)).data('action', action).appendTo(this.els.list);
    }
    this.appendToDOM();
    this.attachEvents();
    return MenuPopover.instances[this.name] = this;
  };
  MenuPopover.prototype.appendToDOM = function() {
    var itemEl, label, ref;
    applyStyles(this.els.container, this.options.style.container);
    applyStyles(this.els.overlay, this.options.style.overlay);
    applyStyles(this.els.list, this.options.style.list);
    if (this.desc) {
      applyStyles(this.els.desc, this.options.style.desc);
    }
    ref = this.els.items;
    for (label in ref) {
      itemEl = ref[label];
      applyStyles(itemEl, this.options.style.listItem);
      if (this.highlights.includes(label)) {
        applyStyles(itemEl, this.options.style.listItemHighlight);
      }
      applyStyles(itemEl.children(), this.options.style.listItemText);
    }
    removeStyles(this.els.items[Object.keys(this.els.items).slice(-1)[0]], {
      borderBottom: ''
    });
    return this.els.container.prependTo(document.body);
  };
  MenuPopover.prototype.attachEvents = function() {
    this.els.overlay.on(this.options.clickEvent, (function(_this) {
      return function() {
        return _this.close();
      };
    })(this));
    this.els.list.on(this.options.clickEvent, '.MenuPopover-list-item', (function(_this) {
      return function(event) {
        var action;
        action = $(event.currentTarget).data('action');
        return _this.close().then(action || function() {});
      };
    })(this));
    this.els.list.on('touchstart', '.MenuPopover-list-item', function() {
      return applyStyles(this, {
        backgroundColor: '#e3e3e3'
      });
    });
    return this.els.list.on('touchend touchcancel', '.MenuPopover-list-item', function() {
      return removeStyles(this, {
        backgroundColor: ''
      });
    });
  };
  MenuPopover.prototype.open = function() {
    return new Promise((function(_this) {
      return function(resolve) {
        var listHeight;
        listHeight = _this.els.list[0].clientHeight - 30;
        applyStyles(_this.els.container, _this.options.styleOpenState.container);
        applyStyles(_this.els.overlay, _this.options.styleOpenState.overlay);
        applyStyles(_this.els.list, _this.options.styleOpenState.list, _this.options.styleOpenState.listTransform(listHeight));
        setTimeout(function() {
          return window.scroll(0, 0);
        });
        setTimeout(resolve, 300);
        return _this.isOpen = true;
      };
    })(this));
  };
  MenuPopover.prototype.close = function() {
    return new Promise((function(_this) {
      return function(resolve) {
        removeStyles(_this.els.overlay, _this.options.styleOpenState.overlay, _this.options.style.overlay);
        removeStyles(_this.els.list, _this.options.styleOpenState.list, _this.options.style.list);
        setTimeout(function() {
          removeStyles(_this.els.container, _this.options.styleOpenState.container, _this.options.style.container);
          return resolve();
        }, 350);
        return _this.isOpen = false;
      };
    })(this));
  };
  MenuPopover.version = '1.2.0';
  MenuPopover.instances = {};
  return window.MenuPopover = MenuPopover;
})(jQuery);
